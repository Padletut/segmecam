# Combined GPU selfie segmentation with CPU-friendly mask and Face Mesh landmarks.

input_stream: "input_video"                # ImageFrame (CPU)
output_stream: "segmentation_mask_cpu"      # ImageFrame (1ch)
output_stream: "multi_face_landmarks"       # std::vector<NormalizedLandmarkList>

node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:segmentation_mask_cpu"
  input_stream_info: { tag_index: "FINISHED" back_edge: true }
  output_stream: "throttled_input_video"
}

node {
  calculator: "ImageFrameToGpuBufferCalculator"
  input_stream: "throttled_input_video"
  output_stream: "input_video_gpu"
}

# Selfie segmentation on GPU -> mask on CPU
node {
  calculator: "SelfieSegmentationGpu"
  input_stream: "IMAGE:input_video_gpu"
  output_stream: "SEGMENTATION_MASK:segmentation_mask_gpu"
}
node {
  calculator: "GpuBufferToImageFrameCalculator"
  input_stream: "segmentation_mask_gpu"
  output_stream: "segmentation_mask_cpu"
}

# Define side packets locally (1 face, with attention)
node {
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:0:num_faces"
  output_side_packet: "PACKET:1:with_attention"
  node_options: {
    [type.googleapis.com/mediapipe.ConstantSidePacketCalculatorOptions]: {
      packet { int_value: 1 }
      packet { bool_value: true }
    }
  }
}

# Face mesh / landmarks on GPU
node {
  calculator: "FaceLandmarkFrontGpu"
  input_stream: "IMAGE:input_video_gpu"
  input_side_packet: "NUM_FACES:num_faces"
  input_side_packet: "WITH_ATTENTION:with_attention"
  output_stream: "LANDMARKS:multi_face_landmarks"
}
