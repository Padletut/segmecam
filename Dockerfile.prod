# syntax=docker/dockerfile:1.7-labs
# ===== SegmeCam (face+seg) — production image =====
# Builds once with Bazel, packages with runfiles + exact .so dependencies.
# Runtime is lean and stable (no OpenCV ABI mismatch).

# ---------- Builder ----------
FROM nvidia/cuda:12.9.0-devel-ubuntu24.04 AS builder
ENV DEBIAN_FRONTEND=noninteractive
SHELL ["/bin/bash", "-lc"]

# Base deps for building (dev headers, OpenCV dev etc.)
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates curl git git-lfs build-essential \
    python3 python3-pip \
    pkg-config cmake ninja-build \
    libopencv-dev ffmpeg \
    libsdl2-dev libgl1-mesa-dev libv4l-dev \
    libx11-dev libxext-dev libxrandr-dev libxi-dev libxinerama-dev libxcursor-dev libxfixes-dev \
    libgtk-3-0 libglib2.0-0 \
    zlib1g-dev libzstd-dev liblzma-dev libxxhash-dev \
    rsync \
 && rm -rf /var/lib/apt/lists/*

# Bazelisk (matches Bazel to MediaPipe)
RUN curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.19.0/bazelisk-linux-amd64 -o /usr/local/bin/bazel \
 && chmod +x /usr/local/bin/bazel

WORKDIR /app

# Copy the entire repo (ensure a reasonable .dockerignore in the project)
COPY . /app/

# Source code is now at /app/mediapipe/examples/desktop/segmecam/ - no copying needed

# Ensure BUILD exists
RUN test -f /app/mediapipe/examples/desktop/segmecam/BUILD || \
    (echo "ERROR: Missing BUILD in segmecam"; ls -la /app/mediapipe/examples/desktop/segmecam; exit 1)

# Fetch LFS blobs in MediaPipe (if used)
RUN git -C /app/mediapipe lfs install || true && git -C /app/mediapipe lfs pull || true

# No need to patch BUILD file - using new structure

# Build and copy artifacts in ONE RUN (cache-mount for Bazel)
WORKDIR /app/mediapipe
RUN --mount=type=cache,target=/root/.cache/bazel bash -lc '\
  set -euo pipefail && \
  # Build
  bazel build -c opt --cxxopt=-I/usr/include/opencv4 \
    //mediapipe/examples/desktop/segmecam:segmecam_gui_gpu && \
  # Find binary and runfiles
  ROOT="$(bazel info execution_root)" && \
  REL="$(bazel cquery --compilation_mode=opt --output=files //mediapipe/examples/desktop/segmecam:segmecam_gui_gpu | head -n1)" && \
  BIN="${ROOT}/${REL}" && \
  RF_DIR="${BIN}.runfiles" && \
  echo "BIN=$BIN" && echo "RF_DIR=$RF_DIR" && \
  test -f "$BIN" && test -d "$RF_DIR" && \
  # Create target directories
  install -d /opt/segmecam/bin /opt/segmecam/runfiles /opt/segmecam/graphs /opt/segmecam/scripts && \
  # Copy binary
  cp -f "$BIN" /opt/segmecam/bin/SegmeCam && \
  # Flatten runfiles: copy CONTENTS of ${RF_DIR}/mediapipe to /opt/segmecam/runfiles directly
  cp -aL "${RF_DIR}/mediapipe/." /opt/segmecam/runfiles/ && \
  echo "Sanity: list tflite under /opt/segmecam/runfiles/mediapipe/modules" && \
  find /opt/segmecam/runfiles/mediapipe/modules -maxdepth 2 -type f -name "*.tflite" | sed -n "1,120p" && \
  # Must exist as real files (not symlinks)
  test -f /opt/segmecam/runfiles/mediapipe/modules/selfie_segmentation/selfie_segmentation.tflite && \
  test -f /opt/segmecam/runfiles/mediapipe/modules/face_landmark/face_landmark_with_attention.tflite && \
  test -f /opt/segmecam/runfiles/mediapipe/modules/face_detection/face_detection_short_range.tflite && \
  test ! -L /opt/segmecam/runfiles/mediapipe/modules/selfie_segmentation/selfie_segmentation.tflite && \
  test ! -L /opt/segmecam/runfiles/mediapipe/modules/face_landmark/face_landmark_with_attention.tflite && \
  test ! -L /opt/segmecam/runfiles/mediapipe/modules/face_detection/face_detection_short_range.tflite \
'

# Copy graphs + scripts from project root
WORKDIR /app
RUN cp -a /app/mediapipe_graphs/*.pbtxt /opt/segmecam/graphs/ && \
    cp -a /app/scripts/. /opt/segmecam/scripts/

# Package with exact .so dependencies that the binary links against (avoid ABI mismatch in runtime)
RUN mkdir -p /opt/segmecam/lib && \
    DEPS="$(ldd /opt/segmecam/bin/SegmeCam | awk '/=> \//{print $3}')" && \
    echo "Copying deps:" && echo "$DEPS" && \
    cp --parents -t /opt/segmecam/lib $DEPS && \
    echo "After copy:" && ls -al /opt/segmecam/lib/usr/lib/x86_64-linux-gnu | sed -n "1,120p"

# ---------- Runtime ----------
FROM nvidia/cuda:12.9.0-runtime-ubuntu24.04 AS runtime
ENV DEBIAN_FRONTEND=noninteractive
SHELL ["/bin/bash", "-lc"]

# Only runtime dependencies (NO opencv here → we use packaged .so from builder)
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    libgl1 \
    libegl1 \
    libglvnd0 \
    libgles2 \
    libnvidia-gl-575 \
    libv4l-0 v4l-utils \
    libsdl2-2.0-0 \
    libgtk-3-0 libglib2.0-0 \
 && rm -rf /var/lib/apt/lists/*

# Copy everything from builder
COPY --from=builder /opt/segmecam /opt/segmecam

# Search paths: use packaged libs before system's
ENV LD_LIBRARY_PATH="/opt/segmecam/lib/lib/x86_64-linux-gnu:/opt/segmecam/lib/usr/lib/x86_64-linux-gnu:/opt/segmecam/lib/lib:/opt/segmecam/lib/usr/lib:/opt/segmecam/lib:${LD_LIBRARY_PATH}"
ENV QT_X11_NO_MITSHM=1 XDG_RUNTIME_DIR=/tmp/xdg __GLX_VENDOR_LIBRARY_NAME=nvidia

WORKDIR /opt/segmecam

# Make your startup script the ENTRYPOINT (you've placed it in ./scripts in the repo)
RUN chmod +x /opt/segmecam/scripts/SegmeCam.sh
ENTRYPOINT ["/opt/segmecam/scripts/SegmeCam.sh"]
